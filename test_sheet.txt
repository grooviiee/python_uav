[MAIN] Load Environement...
You choose scenario_ref environment.
Load Scenario:  scenario_ref
set logger...
Log system for environment just set up...
Log system for environment just set up...
Create agent as isMBS: True
Create agent as isMBS: False
Create agent as isMBS: False
Create agent as isMBS: False
Create agent as isMBS: False
Log system just set up...
Log system just set up...
[INIT_ENV] NUM_UAV: 4, NUM_MBS: 1, NUM_USER: 20
[INIT_ENV_MBS] obs_space: Tuple(Box(0.0, 1800.0, (2, 1), float32), Box(0.0, 1800.0, (2, 4), float32), Box(0.0, 1800.0, (2, 20), float32)), act_space: Box(False, True, (100,), bool)
[INIT_ENV_UAV] agent_id 1 Finished, obs_space: Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)), act_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ENV_UAV] agent_id 2 Finished, obs_space: Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)), act_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ENV_UAV] agent_id 3 Finished, obs_space: Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)), act_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ENV_UAV] agent_id 4 Finished, obs_space: Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)), act_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ENV_AGENT] Set UAV state and action space
[MAIN] Load runner as singleBS
Choose SingleBS_runner
[INIT_RUNNER] Insert Agent settings into Trainer
[INIT_RUNNER] Insert Agent settings into Trainer
[INIT_RUNNER] Insert Agent settings into Trainer -> mappo
[INIT_RUNNER] Make Actor Critic Policy for Agents
[INIT_RUNNER] agent_id: 0, action_space: Box(False, True, (100,), bool)
[ACTOR] returned obs_shape: [(2, 1), (2, 4), (2, 20)]. CNN Base because length is 3
..Init CNNBase
[CNN_LAYER_INIT] is_uav: False, input_channel 2, input_width 5, input_height 5 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [2,5,5],Sequential(
  (0): Conv2d(2, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=4, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[INIT_ACTOR_NETWORK] dtype: Box, num_inputs: 64, num_outputs: 100, action_space: Box(False, True, (100,), bool), use_orthogonal: False
[INIT_ACTOR_NETWORK] self.action_out: DiagGaussian(
  (fc_mean): Linear(in_features=64, out_features=100, bias=True)
  (logstd): AddBias()
)
..Init CNNBase
[CNN_LAYER_INIT] is_uav: False, input_channel 2, input_width 5, input_height 5 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [2,5,5],Sequential(
  (0): Conv2d(2, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=4, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[INIT_RUNNER] agent_id: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[ACTOR] returned obs_shape: [(2,), (40,), (20,)]. CNN Base because length is 3
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[ACTLayer] type ('Tuple') action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 30, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK] self.action_out: ModuleList(
  (0): Categorical(
    (linear): Linear(in_features=64, out_features=30, bias=True)
  )
  (1): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (2): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (3): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
)
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[INIT_RUNNER] agent_id: 2, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[ACTOR] returned obs_shape: [(2,), (40,), (20,)]. CNN Base because length is 3
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[ACTLayer] type ('Tuple') action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 30, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK] self.action_out: ModuleList(
  (0): Categorical(
    (linear): Linear(in_features=64, out_features=30, bias=True)
  )
  (1): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (2): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (3): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
)
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[INIT_RUNNER] agent_id: 3, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[ACTOR] returned obs_shape: [(2,), (40,), (20,)]. CNN Base because length is 3
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[ACTLayer] type ('Tuple') action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 30, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK] self.action_out: ModuleList(
  (0): Categorical(
    (linear): Linear(in_features=64, out_features=30, bias=True)
  )
  (1): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (2): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (3): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
)
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[INIT_RUNNER] agent_id: 4, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[ACTOR] returned obs_shape: [(2,), (40,), (20,)]. CNN Base because length is 3
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[ACTLayer] type ('Tuple') action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 30, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK], dtype: Tuple, action_dim: 1, action_space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[INIT_ACTOR_NETWORK] self.action_out: ModuleList(
  (0): Categorical(
    (linear): Linear(in_features=64, out_features=30, bias=True)
  )
  (1): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (2): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
  (3): Categorical(
    (linear): Linear(in_features=64, out_features=1, bias=True)
  )
)
..Init CNNBase
[CNN_LAYER_INIT] is_uav: True, input_channel 1, input_width 2, input_height 31 hidden_size 64
[INIT_CNN_LAYER] Init CNNLayer: [1,2,31],Sequential(
  (0): Conv2d(1, 32, kernel_size=(2, 2), stride=(2, 2))
  (1): ReLU()
  (2): Flatten()
  (3): Linear(in_features=15, out_features=64, bias=True)
  (4): ReLU()
  (5): Linear(in_features=64, out_features=64, bias=True)
  (6): ReLU()
)
[INIT_RUNNER] Set Policy into Replay buffer and Trainer
[REPLAYBUFFER_INIT] (get_shape_from_act_space) is_uav: False, act_shape: 100
[REPLAYBUFFER_INIT] share_obs Buffer size: 41, 1, 8
[REPLAYBUFFER_INIT] obs Buffer size: 41, 1, 8
[REPLAYBUFFER_INIT] actions Buffer size : 41, 1, 100
[REPLAYBUFFER_INIT] (get_shape_from_act_space) is_uav: True, act_shape: 4
[REPLAYBUFFER_INIT] share_obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] actions Buffer size : 41, 1, 4
[REPLAYBUFFER_INIT] (get_shape_from_act_space) is_uav: True, act_shape: 4
[REPLAYBUFFER_INIT] share_obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] actions Buffer size : 41, 1, 4
[REPLAYBUFFER_INIT] (get_shape_from_act_space) is_uav: True, act_shape: 4
[REPLAYBUFFER_INIT] share_obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] actions Buffer size : 41, 1, 4
[REPLAYBUFFER_INIT] (get_shape_from_act_space) is_uav: True, act_shape: 4
[REPLAYBUFFER_INIT] share_obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] obs Buffer size: 41, 1, 1600
[REPLAYBUFFER_INIT] actions Buffer size : 41, 1, 4
agend_id 0 | Tuple(Box(0.0, 1800.0, (2, 1), float32), Box(0.0, 1800.0, (2, 4), float32), Box(0.0, 1800.0, (2, 20), float32)) | self.buffer[0].obs.shape (42, 1, 50)
agend_id 1 | Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)) | self.buffer[1].obs.shape (42, 1, 62)
agend_id 2 | Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)) | self.buffer[2].obs.shape (42, 1, 62)
agend_id 3 | Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)) | self.buffer[3].obs.shape (42, 1, 62)
agend_id 4 | Tuple(Box(0, 1800, (2,), int32), Box(0, 1800, (40,), int32), Box(0, 30, (20,), int16)) | self.buffer[4].obs.shape (42, 1, 62)
[RUNNER] Insert Agent settings into Trainer Finished
[RUNNER] Warm up
[RUNNER] Run Episode (0/1)
[RUNNER] episode(0/1) big_step(0/25) small_step(0/40)
[RUNNER] episode(0/1) big_step(0/25) small_step(0/40)
[DiagGaussian] returned action_mean torch.Size([32, 100]) from feature_map torch.Size([32, 64])
[ACTLayer_forward] type ('else') x (torch.Size([32, 64])) action_logits (FixedNormal(loc: torch.Size([32, 100]), scale: torch.Size([32, 100]))) action_logits.type (<class 'algorithms.utils.distributions.FixedNormal'>) actions.shape (torch.Size([32, 100]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 100]), action_log_probs: torch.Size([32, 1])
[CRITIC_FORWARD] cent_obs.shape: (2, 5, 5), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 0, action space: Box(False, True, (100,), bool)
[RUNNER] BOX dType action.shape:  (32, 100)
[RUNNER] (Getting action Finished) agent_id (0) action_env.shape ((32, 100)) agg_action_size (1) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 1, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (1) action_env.shape ((32, 4)) agg_action_size (2) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 2, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (2) action_env.shape ((32, 4)) agg_action_size (3) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 3, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (3) action_env.shape ((32, 4)) agg_action_size (4) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 4, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (4) action_env.shape ((32, 4)) agg_action_size (5) n_rollout_threads (1)
[RUNNER] Now ALL USER results aggregated..
[RUNNER] Aggregate ALL AGENT Actions (5) action_log_probs (5) action_env_results (1)
[ENV_STEP] Current_step: 0, length: 1/5
[STATE(AGENT)] displayAgentState
[STATE(AGENT)] agent_id(0), is_uav(False), state(x,y): (414, 549) state(association): []
[STATE(AGENT)] agent_id(1), is_uav(True), state(x,y): (21, 88) state(has_file): [], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(2), is_uav(True), state(x,y): (487, 250) state(has_file): [], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(3), is_uav(True), state(x,y): (1088, 1716) state(has_file): [], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(4), is_uav(True), state(x,y): (1248, 1199) state(has_file): [], state(cache_size): 3, state(conn_user_file_req): []
[STATE(USER)] displayUserState
[STATE(USER)] user_id(0), state(x,y): (1390, 891) state(file_request): 28
[STATE(USER)] user_id(1), state(x,y): (633, 1232) state(file_request): 28
[STATE(USER)] user_id(2), state(x,y): (1049, 1460) state(file_request): 24
[STATE(USER)] user_id(3), state(x,y): (466, 158) state(file_request): 13
[STATE(USER)] user_id(4), state(x,y): (49, 972) state(file_request): 28
[STATE(USER)] user_id(5), state(x,y): (1441, 1129) state(file_request): 23
[STATE(USER)] user_id(6), state(x,y): (414, 1058) state(file_request): 10
[STATE(USER)] user_id(7), state(x,y): (763, 1190) state(file_request): 8
[STATE(USER)] user_id(8), state(x,y): (555, 266) state(file_request): 19
[STATE(USER)] user_id(9), state(x,y): (1641, 1402) state(file_request): 2
[STATE(USER)] user_id(10), state(x,y): (761, 1666) state(file_request): 7
[STATE(USER)] user_id(11), state(x,y): (1591, 679) state(file_request): 9
[STATE(USER)] user_id(12), state(x,y): (560, 1368) state(file_request): 3
[STATE(USER)] user_id(13), state(x,y): (1361, 790) state(file_request): 10
[STATE(USER)] user_id(14), state(x,y): (6, 805) state(file_request): 22
[STATE(USER)] user_id(15), state(x,y): (1499, 1711) state(file_request): 7
[STATE(USER)] user_id(16), state(x,y): (1388, 524) state(file_request): 30
[STATE(USER)] user_id(17), state(x,y): (59, 123) state(file_request): 25
[STATE(USER)] user_id(18), state(x,y): (1671, 1018) state(file_request): 12
[STATE(USER)] user_id(19), state(x,y): (1643, 1534) state(file_request): 27
[WORLD_STEP] Take a step in core
[WORLD_STEP] MBS ACTION: type (<class 'numpy.ndarray'>) len (100) action ([ True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True])
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([12,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BEE50>) action_cache (12) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BEE50>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([11,  0,  0,  0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([20,  0,  0,  0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([11,  0,  0,  0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([11,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64), array([5, 0, 0, 0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BE880>) action_cache (11) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BE880>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([0, 0, 0, 0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([18,  0,  0,  0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BE4C0>) action_cache (0) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BE4C0>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([3, 0, 0, 0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6A25E0>) action_cache (3) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6A25E0>, 0
[MBS_STATE] id(0)
[MBS_STATE] id(0)
[UAV_STATE] id(1), (x,y): (21,88)
[UAV_STATE] id(1), (x,y): (21,88)
[UAV_STATE] id(2), (x,y): (487,250)
[UAV_STATE] id(2), (x,y): (487,250)
[UAV_STATE] id(3), (x,y): (1088,1716)
[UAV_STATE] id(3), (x,y): (1088,1716)
[UAV_STATE] id(4), (x,y): (1248,1199)
[UAV_STATE] id(4), (x,y): (1248,1199)
[USER_STATE] id(0), (x,y): (1390, 891), file_request: (1)
[USER_STATE] id(0), (x,y): (1390, 891), file_request: (1)
[USER_STATE] id(1), (x,y): (633, 1232), file_request: (3)
[USER_STATE] id(1), (x,y): (633, 1232), file_request: (3)
[USER_STATE] id(2), (x,y): (1049, 1460), file_request: (1)
[USER_STATE] id(2), (x,y): (1049, 1460), file_request: (1)
[USER_STATE] id(3), (x,y): (466, 158), file_request: (1)
[USER_STATE] id(3), (x,y): (466, 158), file_request: (1)
[USER_STATE] id(4), (x,y): (49, 972), file_request: (1)
[USER_STATE] id(4), (x,y): (49, 972), file_request: (1)
[USER_STATE] id(5), (x,y): (1441, 1129), file_request: (2)
[USER_STATE] id(5), (x,y): (1441, 1129), file_request: (2)
[USER_STATE] id(6), (x,y): (414, 1058), file_request: (1)
[USER_STATE] id(6), (x,y): (414, 1058), file_request: (1)
[USER_STATE] id(7), (x,y): (763, 1190), file_request: (1)
[USER_STATE] id(7), (x,y): (763, 1190), file_request: (1)
[USER_STATE] id(8), (x,y): (555, 266), file_request: (19)
[USER_STATE] id(8), (x,y): (555, 266), file_request: (19)
[USER_STATE] id(9), (x,y): (1641, 1402), file_request: (3)
[USER_STATE] id(9), (x,y): (1641, 1402), file_request: (3)
[USER_STATE] id(10), (x,y): (761, 1666), file_request: (1)
[USER_STATE] id(10), (x,y): (761, 1666), file_request: (1)
[USER_STATE] id(11), (x,y): (1591, 679), file_request: (3)
[USER_STATE] id(11), (x,y): (1591, 679), file_request: (3)
[USER_STATE] id(12), (x,y): (560, 1368), file_request: (14)
[USER_STATE] id(12), (x,y): (560, 1368), file_request: (14)
[USER_STATE] id(13), (x,y): (1361, 790), file_request: (2)
[USER_STATE] id(13), (x,y): (1361, 790), file_request: (2)
[USER_STATE] id(14), (x,y): (6, 805), file_request: (1)
[USER_STATE] id(14), (x,y): (6, 805), file_request: (1)
[USER_STATE] id(15), (x,y): (1499, 1711), file_request: (2)
[USER_STATE] id(15), (x,y): (1499, 1711), file_request: (2)
[USER_STATE] id(16), (x,y): (1388, 524), file_request: (2)
[USER_STATE] id(16), (x,y): (1388, 524), file_request: (2)
[USER_STATE] id(17), (x,y): (59, 123), file_request: (3)
[USER_STATE] id(17), (x,y): (59, 123), file_request: (3)
[USER_STATE] id(18), (x,y): (1671, 1018), file_request: (20)
[USER_STATE] id(18), (x,y): (1671, 1018), file_request: (20)
[USER_STATE] id(19), (x,y): (1643, 1534), file_request: (1)
[USER_STATE] id(19), (x,y): (1643, 1534), file_request: (1)
F:\Code\python_uav\envs\core.py:335: RuntimeWarning: invalid value encountered in scalar divide
  res = self.GetPower(src, dst) * math.pow(10, -self.h_UavUser(src, dst) / 10) / (NOISE_POWER * lower)
[ENV] [get_obs] agent_id: 0, obs: [[414, 549], [21.0, 88.0, 487.0, 250.0, 1088.0, 1716.0, 1248.0, 1199.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534]]
is_done: False, self.current_step: 1, self.world_length: 40
[ENV] [get_obs] agent_id: 1, obs: [[21.0, 88.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([ 1,  3,  1,  1,  1,  2,  1,  1, 19,  3,  1,  3, 14,  2,  1,  2,  2,
        3, 20,  1])]
is_done: False, self.current_step: 1, self.world_length: 40
[ENV] [get_obs] agent_id: 2, obs: [[487.0, 250.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([ 1,  3,  1,  1,  1,  2,  1,  1, 19,  3,  1,  3, 14,  2,  1,  2,  2,
        3, 20,  1])]
is_done: False, self.current_step: 1, self.world_length: 40
[ENV] [get_obs] agent_id: 3, obs: [[1088.0, 1716.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([ 1,  3,  1,  1,  1,  2,  1,  1, 19,  3,  1,  3, 14,  2,  1,  2,  2,
        3, 20,  1])]
is_done: False, self.current_step: 1, self.world_length: 40
[ENV] [get_obs] agent_id: 4, obs: [[1248.0, 1199.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([ 1,  3,  1,  1,  1,  2,  1,  1, 19,  3,  1,  3, 14,  2,  1,  2,  2,
        3, 20,  1])]
is_done: False, self.current_step: 1, self.world_length: 40
[ENV_STEP] get reward_n: [[-7.27985457019607e+20], [nan], [nan], [nan], [nan]], self.shared_reward: True, reward: nan
[RUNNER] Get rewards: [[nan], [nan], [nan], [nan], [nan]]
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 0, len(obs[idx]): 3, len(share_obs): 1
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 1, len(obs[idx]): 3, len(share_obs): 2
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 2, len(obs[idx]): 3, len(share_obs): 3
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 3, len(obs[idx]): 3, len(share_obs): 4
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 4, len(obs[idx]): 3, len(share_obs): 5
[RUNNER_INSERT] SHARE_OBS len(share_obs): 5
[RUNNER_REWARD] individual_reward: [[-7.27985457019607e+20], [nan], [nan], [nan], [nan]]
[RUNNER_REWARD] tatal_reward: nan
[RUNNER_REWARD] tatal_reward: nan
[RUNNER] episode(0/1) big_step(0/25) small_step(1/40)
[RUNNER] episode(0/1) big_step(0/25) small_step(1/40)
[DiagGaussian] returned action_mean torch.Size([32, 100]) from feature_map torch.Size([32, 64])
[ACTLayer_forward] type ('else') x (torch.Size([32, 64])) action_logits (FixedNormal(loc: torch.Size([32, 100]), scale: torch.Size([32, 100]))) action_logits.type (<class 'algorithms.utils.distributions.FixedNormal'>) actions.shape (torch.Size([32, 100]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 100]), action_log_probs: torch.Size([32, 1])
[CRITIC_FORWARD] cent_obs.shape: (2, 5, 5), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 0, action space: Box(False, True, (100,), bool)
[RUNNER] BOX dType action.shape:  (32, 100)
[RUNNER] (Getting action Finished) agent_id (0) action_env.shape ((32, 100)) agg_action_size (1) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 1, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (1) action_env.shape ((32, 4)) agg_action_size (2) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 2, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (2) action_env.shape ((32, 4)) agg_action_size (3) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 3, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (3) action_env.shape ((32, 4)) agg_action_size (4) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 4, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (4) action_env.shape ((32, 4)) agg_action_size (5) n_rollout_threads (1)
[RUNNER] Now ALL USER results aggregated..
[RUNNER] Aggregate ALL AGENT Actions (5) action_log_probs (5) action_env_results (1)
[ENV_STEP] Current_step: 1, length: 1/5
[STATE(AGENT)] displayAgentState
[STATE(AGENT)] agent_id(0), is_uav(False), state(x,y): (414, 549) state(association): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[STATE(AGENT)] agent_id(1), is_uav(True), state(x,y): (21.0, 88.0) state(has_file): [12], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(2), is_uav(True), state(x,y): (487.0, 250.0) state(has_file): [11], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(3), is_uav(True), state(x,y): (1088.0, 1716.0) state(has_file): [0], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(4), is_uav(True), state(x,y): (1248.0, 1199.0) state(has_file): [3], state(cache_size): 3, state(conn_user_file_req): []
[STATE(USER)] displayUserState
[STATE(USER)] user_id(0), state(x,y): (1390, 891) state(file_request): [[1]]
[STATE(USER)] user_id(1), state(x,y): (633, 1232) state(file_request): [[3]]
[STATE(USER)] user_id(2), state(x,y): (1049, 1460) state(file_request): [[1]]
[STATE(USER)] user_id(3), state(x,y): (466, 158) state(file_request): [[1]]
[STATE(USER)] user_id(4), state(x,y): (49, 972) state(file_request): [[1]]
[STATE(USER)] user_id(5), state(x,y): (1441, 1129) state(file_request): [[2]]
[STATE(USER)] user_id(6), state(x,y): (414, 1058) state(file_request): [[1]]
[STATE(USER)] user_id(7), state(x,y): (763, 1190) state(file_request): [[1]]
[STATE(USER)] user_id(8), state(x,y): (555, 266) state(file_request): [[19]]
[STATE(USER)] user_id(9), state(x,y): (1641, 1402) state(file_request): [[3]]
[STATE(USER)] user_id(10), state(x,y): (761, 1666) state(file_request): [[1]]
[STATE(USER)] user_id(11), state(x,y): (1591, 679) state(file_request): [[3]]
[STATE(USER)] user_id(12), state(x,y): (560, 1368) state(file_request): [[14]]
[STATE(USER)] user_id(13), state(x,y): (1361, 790) state(file_request): [[2]]
[STATE(USER)] user_id(14), state(x,y): (6, 805) state(file_request): [[1]]
[STATE(USER)] user_id(15), state(x,y): (1499, 1711) state(file_request): [[2]]
[STATE(USER)] user_id(16), state(x,y): (1388, 524) state(file_request): [[2]]
[STATE(USER)] user_id(17), state(x,y): (59, 123) state(file_request): [[3]]
[STATE(USER)] user_id(18), state(x,y): (1671, 1018) state(file_request): [[20]]
[STATE(USER)] user_id(19), state(x,y): (1643, 1534) state(file_request): [[1]]
[WORLD_STEP] Take a step in core
[WORLD_STEP] MBS ACTION: type (<class 'numpy.ndarray'>) len (100) action ([ True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True])
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([23,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([11,  0,  0,  0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([6, 0, 0, 0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BEE50>) action_cache (23) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BEE50>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([15,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([20,  0,  0,  0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([11,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BE880>) action_cache (15) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BE880>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([7, 0, 0, 0], dtype=int64), array([11,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([20,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([27,  0,  0,  0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BE4C0>) action_cache (7) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BE4C0>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([29,  0,  0,  0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([20,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([2, 0, 0, 0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6A25E0>) action_cache (29) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6A25E0>, 0
[MBS_STATE] id(0)
[MBS_STATE] id(0)
[UAV_STATE] id(1), (x,y): (21,88)
[UAV_STATE] id(1), (x,y): (21,88)
[UAV_STATE] id(2), (x,y): (487,250)
[UAV_STATE] id(2), (x,y): (487,250)
[UAV_STATE] id(3), (x,y): (1088,1716)
[UAV_STATE] id(3), (x,y): (1088,1716)
[UAV_STATE] id(4), (x,y): (1248,1199)
[UAV_STATE] id(4), (x,y): (1248,1199)
[USER_STATE] id(0), (x,y): (1390, 891), file_request: (3)
[USER_STATE] id(0), (x,y): (1390, 891), file_request: (3)
[USER_STATE] id(1), (x,y): (633, 1232), file_request: (1)
[USER_STATE] id(1), (x,y): (633, 1232), file_request: (1)
[USER_STATE] id(2), (x,y): (1049, 1460), file_request: (2)
[USER_STATE] id(2), (x,y): (1049, 1460), file_request: (2)
[USER_STATE] id(3), (x,y): (466, 158), file_request: (3)
[USER_STATE] id(3), (x,y): (466, 158), file_request: (3)
[USER_STATE] id(4), (x,y): (49, 972), file_request: (1)
[USER_STATE] id(4), (x,y): (49, 972), file_request: (1)
[USER_STATE] id(5), (x,y): (1441, 1129), file_request: (1)
[USER_STATE] id(5), (x,y): (1441, 1129), file_request: (1)
[USER_STATE] id(6), (x,y): (414, 1058), file_request: (1)
[USER_STATE] id(6), (x,y): (414, 1058), file_request: (1)
[USER_STATE] id(7), (x,y): (763, 1190), file_request: (1)
[USER_STATE] id(7), (x,y): (763, 1190), file_request: (1)
[USER_STATE] id(8), (x,y): (555, 266), file_request: (1)
[USER_STATE] id(8), (x,y): (555, 266), file_request: (1)
[USER_STATE] id(9), (x,y): (1641, 1402), file_request: (3)
[USER_STATE] id(9), (x,y): (1641, 1402), file_request: (3)
[USER_STATE] id(10), (x,y): (761, 1666), file_request: (1)
[USER_STATE] id(10), (x,y): (761, 1666), file_request: (1)
[USER_STATE] id(11), (x,y): (1591, 679), file_request: (3)
[USER_STATE] id(11), (x,y): (1591, 679), file_request: (3)
[USER_STATE] id(12), (x,y): (560, 1368), file_request: (1)
[USER_STATE] id(12), (x,y): (560, 1368), file_request: (1)
[USER_STATE] id(13), (x,y): (1361, 790), file_request: (1)
[USER_STATE] id(13), (x,y): (1361, 790), file_request: (1)
[USER_STATE] id(14), (x,y): (6, 805), file_request: (1)
[USER_STATE] id(14), (x,y): (6, 805), file_request: (1)
[USER_STATE] id(15), (x,y): (1499, 1711), file_request: (1)
[USER_STATE] id(15), (x,y): (1499, 1711), file_request: (1)
[USER_STATE] id(16), (x,y): (1388, 524), file_request: (1)
[USER_STATE] id(16), (x,y): (1388, 524), file_request: (1)
[USER_STATE] id(17), (x,y): (59, 123), file_request: (1)
[USER_STATE] id(17), (x,y): (59, 123), file_request: (1)
[USER_STATE] id(18), (x,y): (1671, 1018), file_request: (1)
[USER_STATE] id(18), (x,y): (1671, 1018), file_request: (1)
[USER_STATE] id(19), (x,y): (1643, 1534), file_request: (1)
[USER_STATE] id(19), (x,y): (1643, 1534), file_request: (1)
[ENV] [get_obs] agent_id: 0, obs: [[414, 549], [21.0, 88.0, 487.0, 250.0, 1088.0, 1716.0, 1248.0, 1199.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534]]
is_done: False, self.current_step: 2, self.world_length: 40
[ENV] [get_obs] agent_id: 1, obs: [[21.0, 88.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([3, 1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1])]
is_done: False, self.current_step: 2, self.world_length: 40
[ENV] [get_obs] agent_id: 2, obs: [[487.0, 250.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([3, 1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1])]
is_done: False, self.current_step: 2, self.world_length: 40
[ENV] [get_obs] agent_id: 3, obs: [[1088.0, 1716.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([3, 1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1])]
is_done: False, self.current_step: 2, self.world_length: 40
[ENV] [get_obs] agent_id: 4, obs: [[1248.0, 1199.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([3, 1, 2, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1])]
is_done: False, self.current_step: 2, self.world_length: 40
[ENV_STEP] get reward_n: [[-7.27985457019607e+20], [nan], [nan], [nan], [nan]], self.shared_reward: True, reward: nan
[RUNNER] Get rewards: [[nan], [nan], [nan], [nan], [nan]]
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 0, len(obs[idx]): 3, len(share_obs): 1
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 1, len(obs[idx]): 3, len(share_obs): 2
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 2, len(obs[idx]): 3, len(share_obs): 3
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 3, len(obs[idx]): 3, len(share_obs): 4
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 4, len(obs[idx]): 3, len(share_obs): 5
[RUNNER_INSERT] SHARE_OBS len(share_obs): 5
[RUNNER_REWARD] individual_reward: [[-7.27985457019607e+20], [nan], [nan], [nan], [nan]]
[RUNNER_REWARD] tatal_reward: nan
[RUNNER_REWARD] tatal_reward: nan
[RUNNER] episode(0/1) big_step(0/25) small_step(2/40)
[RUNNER] episode(0/1) big_step(0/25) small_step(2/40)
[DiagGaussian] returned action_mean torch.Size([32, 100]) from feature_map torch.Size([32, 64])
[ACTLayer_forward] type ('else') x (torch.Size([32, 64])) action_logits (FixedNormal(loc: torch.Size([32, 100]), scale: torch.Size([32, 100]))) action_logits.type (<class 'algorithms.utils.distributions.FixedNormal'>) actions.shape (torch.Size([32, 100]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 100]), action_log_probs: torch.Size([32, 1])
[CRITIC_FORWARD] cent_obs.shape: (2, 5, 5), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 0, action space: Box(False, True, (100,), bool)
[RUNNER] BOX dType action.shape:  (32, 100)
[RUNNER] (Getting action Finished) agent_id (0) action_env.shape ((32, 100)) agg_action_size (1) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 1, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (1) action_env.shape ((32, 4)) agg_action_size (2) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 2, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (2) action_env.shape ((32, 4)) agg_action_size (3) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 3, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (3) action_env.shape ((32, 4)) agg_action_size (4) n_rollout_threads (1)
[ACTLayer_forward] type ('tuple') idx (0) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 30]), logits: torch.Size([32, 30]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (1) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (2) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[ACTLayer_forward] type ('tuple') idx (3) x (torch.Size([32, 64])) action_logit (FixedCategorical(probs: torch.Size([32, 1]), logits: torch.Size([32, 1]))) action_logit.type (<class 'algorithms.utils.distributions.FixedCategorical'>) action.shape (torch.Size([32, 1]))
[R_Actor] Forward actor_features: torch.Size([32, 64]), actions: torch.Size([32, 4]), action_log_probs: torch.Size([32, 4])
[CRITIC_FORWARD] cent_obs.shape: (1, 2, 31), _use_naive_recurrent_policy:False, _use_recurrent_policy:False
[RUNNER] agent_id : 4, action space: Tuple(Box(False, True, (30,), bool), Box(0.0, 23.0, (1,), float32), Box(0.0, 20.0, (1,), float32), Box(0.0, 360.0, (1,), float32))
[RUNNER] Tuple dType action.shape:  (32, 4)
[RUNNER] (Getting action Finished) agent_id (4) action_env.shape ((32, 4)) agg_action_size (5) n_rollout_threads (1)
[RUNNER] Now ALL USER results aggregated..
[RUNNER] Aggregate ALL AGENT Actions (5) action_log_probs (5) action_env_results (1)
[ENV_STEP] Current_step: 2, length: 1/5
[STATE(AGENT)] displayAgentState
[STATE(AGENT)] agent_id(0), is_uav(False), state(x,y): (414, 549) state(association): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[STATE(AGENT)] agent_id(1), is_uav(True), state(x,y): (21.0, 88.0) state(has_file): [23], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(2), is_uav(True), state(x,y): (487.0, 250.0) state(has_file): [15], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(3), is_uav(True), state(x,y): (1088.0, 1716.0) state(has_file): [7], state(cache_size): 3, state(conn_user_file_req): []
[STATE(AGENT)] agent_id(4), is_uav(True), state(x,y): (1248.0, 1199.0) state(has_file): [29], state(cache_size): 3, state(conn_user_file_req): []
[STATE(USER)] displayUserState
[STATE(USER)] user_id(0), state(x,y): (1390, 891) state(file_request): [[3]]
[STATE(USER)] user_id(1), state(x,y): (633, 1232) state(file_request): [[1]]
[STATE(USER)] user_id(2), state(x,y): (1049, 1460) state(file_request): [[2]]
[STATE(USER)] user_id(3), state(x,y): (466, 158) state(file_request): [[3]]
[STATE(USER)] user_id(4), state(x,y): (49, 972) state(file_request): [[1]]
[STATE(USER)] user_id(5), state(x,y): (1441, 1129) state(file_request): [[1]]
[STATE(USER)] user_id(6), state(x,y): (414, 1058) state(file_request): [[1]]
[STATE(USER)] user_id(7), state(x,y): (763, 1190) state(file_request): [[1]]
[STATE(USER)] user_id(8), state(x,y): (555, 266) state(file_request): [[1]]
[STATE(USER)] user_id(9), state(x,y): (1641, 1402) state(file_request): [[3]]
[STATE(USER)] user_id(10), state(x,y): (761, 1666) state(file_request): [[1]]
[STATE(USER)] user_id(11), state(x,y): (1591, 679) state(file_request): [[3]]
[STATE(USER)] user_id(12), state(x,y): (560, 1368) state(file_request): [[1]]
[STATE(USER)] user_id(13), state(x,y): (1361, 790) state(file_request): [[1]]
[STATE(USER)] user_id(14), state(x,y): (6, 805) state(file_request): [[1]]
[STATE(USER)] user_id(15), state(x,y): (1499, 1711) state(file_request): [[1]]
[STATE(USER)] user_id(16), state(x,y): (1388, 524) state(file_request): [[1]]
[STATE(USER)] user_id(17), state(x,y): (59, 123) state(file_request): [[1]]
[STATE(USER)] user_id(18), state(x,y): (1671, 1018) state(file_request): [[1]]
[STATE(USER)] user_id(19), state(x,y): (1643, 1534) state(file_request): [[1]]
[WORLD_STEP] Take a step in core
[WORLD_STEP] MBS ACTION: type (<class 'numpy.ndarray'>) len (100) action ([ True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True  True  True  True  True  True  True  True  True
  True  True  True  True])
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([29,  0,  0,  0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([9, 0, 0, 0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BEE50>) action_cache (29) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BEE50>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([14,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([20,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([23,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([29,  0,  0,  0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([1, 0, 0, 0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([12,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([2, 0, 0, 0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BE880>) action_cache (14) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BE880>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([2, 0, 0, 0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([22,  0,  0,  0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([20,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([3, 0, 0, 0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([14,  0,  0,  0], dtype=int64), array([16,  0,  0,  0], dtype=int64), array([11,  0,  0,  0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([5, 0, 0, 0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([23,  0,  0,  0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6BE4C0>) action_cache (2) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6BE4C0>, 0
[WORLD_STEP] UAV ACTION: type (<class 'list'>) len (32) action ([array([20,  0,  0,  0], dtype=int64), array([13,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([26,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([7, 0, 0, 0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([4, 0, 0, 0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([0, 0, 0, 0], dtype=int64), array([28,  0,  0,  0], dtype=int64), array([19,  0,  0,  0], dtype=int64), array([10,  0,  0,  0], dtype=int64), array([20,  0,  0,  0], dtype=int64), array([15,  0,  0,  0], dtype=int64), array([18,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([25,  0,  0,  0], dtype=int64), array([27,  0,  0,  0], dtype=int64), array([21,  0,  0,  0], dtype=int64), array([8, 0, 0, 0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([24,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([17,  0,  0,  0], dtype=int64), array([6, 0, 0, 0], dtype=int64), array([1, 0, 0, 0], dtype=int64)])
[uav_apply_cache] agent_id (<envs.core.Agent object at 0x000002991C6A25E0>) action_cache (20) type (<class 'numpy.int64'>)
[uav_apply_power] <envs.core.Agent object at 0x000002991C6A25E0>, 0
[MBS_STATE] id(0)
[MBS_STATE] id(0)
[UAV_STATE] id(1), (x,y): (21,88)
[UAV_STATE] id(1), (x,y): (21,88)
[UAV_STATE] id(2), (x,y): (487,250)
[UAV_STATE] id(2), (x,y): (487,250)
[UAV_STATE] id(3), (x,y): (1088,1716)
[UAV_STATE] id(3), (x,y): (1088,1716)
[UAV_STATE] id(4), (x,y): (1248,1199)
[UAV_STATE] id(4), (x,y): (1248,1199)
[USER_STATE] id(0), (x,y): (1390, 891), file_request: (1)
[USER_STATE] id(0), (x,y): (1390, 891), file_request: (1)
[USER_STATE] id(1), (x,y): (633, 1232), file_request: (1)
[USER_STATE] id(1), (x,y): (633, 1232), file_request: (1)
[USER_STATE] id(2), (x,y): (1049, 1460), file_request: (1)
[USER_STATE] id(2), (x,y): (1049, 1460), file_request: (1)
[USER_STATE] id(3), (x,y): (466, 158), file_request: (1)
[USER_STATE] id(3), (x,y): (466, 158), file_request: (1)
[USER_STATE] id(4), (x,y): (49, 972), file_request: (1)
[USER_STATE] id(4), (x,y): (49, 972), file_request: (1)
[USER_STATE] id(5), (x,y): (1441, 1129), file_request: (1)
[USER_STATE] id(5), (x,y): (1441, 1129), file_request: (1)
[USER_STATE] id(6), (x,y): (414, 1058), file_request: (2)
[USER_STATE] id(6), (x,y): (414, 1058), file_request: (2)
[USER_STATE] id(7), (x,y): (763, 1190), file_request: (1)
[USER_STATE] id(7), (x,y): (763, 1190), file_request: (1)
[USER_STATE] id(8), (x,y): (555, 266), file_request: (1)
[USER_STATE] id(8), (x,y): (555, 266), file_request: (1)
[USER_STATE] id(9), (x,y): (1641, 1402), file_request: (1)
[USER_STATE] id(9), (x,y): (1641, 1402), file_request: (1)
[USER_STATE] id(10), (x,y): (761, 1666), file_request: (6)
[USER_STATE] id(10), (x,y): (761, 1666), file_request: (6)
[USER_STATE] id(11), (x,y): (1591, 679), file_request: (2)
[USER_STATE] id(11), (x,y): (1591, 679), file_request: (2)
[USER_STATE] id(12), (x,y): (560, 1368), file_request: (2)
[USER_STATE] id(12), (x,y): (560, 1368), file_request: (2)
[USER_STATE] id(13), (x,y): (1361, 790), file_request: (6)
[USER_STATE] id(13), (x,y): (1361, 790), file_request: (6)
[USER_STATE] id(14), (x,y): (6, 805), file_request: (1)
[USER_STATE] id(14), (x,y): (6, 805), file_request: (1)
[USER_STATE] id(15), (x,y): (1499, 1711), file_request: (2)
[USER_STATE] id(15), (x,y): (1499, 1711), file_request: (2)
[USER_STATE] id(16), (x,y): (1388, 524), file_request: (1)
[USER_STATE] id(16), (x,y): (1388, 524), file_request: (1)
[USER_STATE] id(17), (x,y): (59, 123), file_request: (1)
[USER_STATE] id(17), (x,y): (59, 123), file_request: (1)
[USER_STATE] id(18), (x,y): (1671, 1018), file_request: (3)
[USER_STATE] id(18), (x,y): (1671, 1018), file_request: (3)
[USER_STATE] id(19), (x,y): (1643, 1534), file_request: (2)
[USER_STATE] id(19), (x,y): (1643, 1534), file_request: (2)
[ENV] [get_obs] agent_id: 0, obs: [[414, 549], [21.0, 88.0, 487.0, 250.0, 1088.0, 1716.0, 1248.0, 1199.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534]]
is_done: False, self.current_step: 3, self.world_length: 40
[ENV] [get_obs] agent_id: 1, obs: [[21.0, 88.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 6, 2, 2, 6, 1, 2, 1, 1, 3, 2])]
is_done: False, self.current_step: 3, self.world_length: 40
[ENV] [get_obs] agent_id: 2, obs: [[487.0, 250.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 6, 2, 2, 6, 1, 2, 1, 1, 3, 2])]
is_done: False, self.current_step: 3, self.world_length: 40
[ENV] [get_obs] agent_id: 3, obs: [[1088.0, 1716.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 6, 2, 2, 6, 1, 2, 1, 1, 3, 2])]
is_done: False, self.current_step: 3, self.world_length: 40
[ENV] [get_obs] agent_id: 4, obs: [[1248.0, 1199.0], [1390, 891, 633, 1232, 1049, 1460, 466, 158, 49, 972, 1441, 1129, 414, 1058, 763, 1190, 555, 266, 1641, 1402, 761, 1666, 1591, 679, 560, 1368, 1361, 790, 6, 805, 1499, 1711, 1388, 524, 59, 123, 1671, 1018, 1643, 1534], array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 6, 2, 2, 6, 1, 2, 1, 1, 3, 2])]
is_done: False, self.current_step: 3, self.world_length: 40
[ENV_STEP] get reward_n: [[-7.27985457019607e+20], [nan], [nan], [nan], [nan]], self.shared_reward: True, reward: nan
[RUNNER] Get rewards: [[nan], [nan], [nan], [nan], [nan]]
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 0, len(obs[idx]): 3, len(share_obs): 1
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 1, len(obs[idx]): 3, len(share_obs): 2
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 2, len(obs[idx]): 3, len(share_obs): 3
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 3, len(obs[idx]): 3, len(share_obs): 4
[RUNNER_INSERT] MAKE_SHARE_OBS: idx: 4, len(obs[idx]): 3, len(share_obs): 5
[RUNNER_INSERT] SHARE_OBS len(share_obs): 5
[RUNNER_REWARD] individual_reward: [[-7.27985457019607e+20], [nan], [nan], [nan], [nan]]
[RUNNER_REWARD] tatal_reward: nan
[RUNNER_REWARD] tatal_reward: nan
Traceback (most recent call last):
  File "F:\Code\python_uav\main.py", line 158, in <module>
    main(arglist)
  File "F:\Code\python_uav\main.py", line 142, in main
    runner.run()
  File "F:\Code\python_uav\runner\singleBS_runner.py", line 154, in run
    raise NotImplementedError("Breakpoint")
NotImplementedError: Breakpoint